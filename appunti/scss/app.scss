@import "reset";
@import "colors";
h1 {
  color: plum;
  font: {
    size: 3em;
    weight: bold;
    family: "Gill Sans" "Gill sans MT", Calibri, "Trebuchet MS";
  }
}
.box1 {
  width: 200px;
  height: 200px;
  margin: 30px 10px;
  color: white;
  background-color: rgb(140, 140, 192);
}

//dobbiamo fare box2 come box1 ma deve avere una propietà diversa
//possiamo usare sass per non dover ripetere i valori delle cose a cui volgiamo dare le stesse propieà

.box2 {
  @extend .box1; // il tag @extend ci permette di riprendere le propietà
  font-size: 3em;
  background-color: rgb(185, 107, 107);
}
// direttiva sono parole che iniziano con la @
// @extend come detto usato in un blocco css riprende tutte le regole di un'altro blocco
//inizialliza il nuovo blocc odi stile a partire da uno precedentemente gia scritto
//concetto di ereditarietà

// 2) MIXIN
// a volte extend non è il miglior modo per creare una varianta di una classe in modo efficace
// @mixin ragiona in un modo più logico, quindi ricaveremo n classi diverse a partire da un punto di partenza

//possiamo dargli un nome
@mixin baseButton($mainColor) {
  padding: 10px 20px;
  display: inline-block;
  text-transform: uppercase;
  border-radius: 10px;
  margin: 20px;
  cursor: pointer;
  box-shadow: 0 0 20px $mainColor;
  outline-color: 1px solid $mainColor;
  background-color: $mainColor;
  color: white;
  &:hover {
    box-shadow: none;
    color: $mainColor;
    background-color: white;
  }
}

// creo una base con mixin e poi posso riprenderlo e usarlo quando voglio
// con la kewword @include e riportare il nome della mia variabile creata con mixin
//SI USA QUANDO VOGLIAMO CREARE VARIANTI DI UNO STAMPINO
.button-green {
  @include baseButton(rgb(92, 173, 92));
}
//definire dei parametri da inserire
.button-red {
  @include baseButton(rgb(156, 75, 75));
}

.button-special-green {
  @include baseButton($special-green);
}
.button-special-red {
  @include baseButton($special-red);
}

@mixin customPar($font-size, $lspacing) {
  font-size: $font-size;
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
  padding: 2em;
  letter-spacing: $lspacing;
}

.normalPr1 {
  @include customPar(1.2em, normal);
}
.normalPr2 {
  @include customPar(3em, 0.5px);
}

//INTERPOLAZIONE DI STRINGHE

@mixin customBox($size, $val, $property) {
  width: $size;
  height: $size;
  margin: $size;
  background-#{$property}: $val;
}
//usando cancelletto graffe riesco a rendere dinamici  i valori
.customBox1 {
  @include customBox(150px, rgb(241, 176, 55), color);
}
.customBox2 {
  @include customBox(250px, url("https://placekitten.com/250/250"), image);
}
//possiamo anche passare attributi provenienti da variaibli

// $myPic: url (www.qualcosa.it)
// .customBox2{
//   @include customBox{250px, $myPic, image)

// IF ELSE

//ci permette di generare diversi stili, a seconda della valutazione di una condizione

// direttiva è @if accetta espressione SASS come condizione e ritonerà
// un blocco di stile

//immaginiamo di scrivere una libreria personalizzabile dall'utente che ha la possibilità di impostare
// propri colori margin padding etc

$genericPadding: 16px;
// può anche essere modificato dall'utente
// 16px è il valore che noi abbiamo dato di default alla variaible

//obbiettivo è quello di applicare un padding top al paragrafo
// sulla base del genericPadding che era 16 ma potrebbe essere stato sovrascritto dall'utente
//con valore diverso

.par {
  @if ($genericPadding<16px) {
    // questo blocco di stile verrà applicato quando
    // genericPadding ha un valore inferiore a 16px
    padding-top: 1em;
  } @else {
    //questo verrà applicato a Par solo se
    //$genericButton ha un valore superiore a 16px
    padding-top: $genericPadding;
  }
}
// il blocco risultate classe Par avrà una solo proprietà padding top con
//un valore assegnato dinamicamente

$template: standard;
// $ template può assumere due valori standard e special
//si fa creando un blocco if else
$bg-standard: rgb(179, 129, 129);
$text-standard: rgb(126, 52, 52);

$bg-special: red;
$text-special: gold;

body {
  @if ($template == standard) {
    background-color: $bg-standard;
    color: $text-standard;
  } @else if ($template== special) {
    background-color: $bg-special;
    color: $text-special;
  } @else {
    background-color: black;
    color: black;
  }
}

//CICLI FOR

// ci sono due strutture diverse per il ciclo for
//una per includere il valore finale

// @for $contatore from <start> to <end> questo non comprende end i<5 eseguito 5 volte 5 escluso

@for $i from 0 to 5 {
  .custom-p#{$i} {
    padding-left: $i * 12px;
    color: green;
  }
}

// @for $contatore from <start> through <end> questo ciclo comprende end 1<=5 eseguito 6 volte
@for $i from 0 through 5 {
  .custom-p0#{$i} {
    padding-left: $i * 12px;
    color: green;
  }
}
// si utilizzano principalmente per generare classi dinamicamente

//EACH ci permette di iterare tra gli elementi di un lista per esempio
//possiamo restitutire determiante istruzioni per ogni elemento ciclato della lista

//*@each $variable in <list>
$colors: green, navy, yellow, pink;
@each $c in $colors {
  .paragrah-#{c} {
    color: $c;
  }
}
